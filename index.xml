<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yet Another Helm Operator on yaho</title><link>https://soer3n.github.io/yaho/</link><description>Recent content in Yet Another Helm Operator on yaho</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://soer3n.github.io/yaho/index.xml" rel="self" type="application/rss+xml"/><item><title>Repositories</title><link>https://soer3n.github.io/yaho/architecture/repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/architecture/repository/</guid><description>Repository The repo resource represents an initialization of an helm repository. It is similar to helm cli commands &amp;ldquo;helm repo add &amp;hellip;&amp;rdquo; and &amp;ldquo;helm repo update &amp;hellip;&amp;rdquo; and downloads the repository index file for a given url to parse the content and create a configmap with chart index information for each specified chart. Or if no chart specified for each. It is also parsing the chart resources if they are specified in the chart list in the spec.</description></item><item><title>Respositories &amp; Charts</title><link>https://soer3n.github.io/yaho/usage/repos_charts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/usage/repos_charts/</guid><description>There are two ways for managing repositories and charts. Either by configuring charts by repository or chart resource.
manage by repository resource Let&amp;rsquo;s deploy a basic repository resource at first.
--- apiVersion: yaho.soer3n.dev/v1alpha1 kind: Repository metadata: name: test-repo spec: name: test-repo url: https://soer3n.github.io/charts/testing_a charts: [] Nothing except the resource and indices for all charts found in downloaded index should be installed.
$ kubectl get repositories.yaho.soer3n.dev NAME GROUP SYNCED CHARTS AGE test-repo true 0 14s $ kubectl get charts.</description></item><item><title>Charts</title><link>https://soer3n.github.io/yaho/architecture/chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/architecture/chart/</guid><description>Chart The chart resource represents the specification for an helm chart. For every specified and valid version the controller will create or update 3 configmaps for chart templates, crds and default values. If enabled dependency chart resources will be also created or updated. See here for detailed information about the spec structure.
%%{init:{"theme":"forest", "mirrorActors":"true", "sequence": {"showSequenceNumbers":false, "wrap": false,"useMaxWidth": true}}}%% sequenceDiagram participant C AS client participant R AS reconciler participant M AS chart model participant VM AS chartversion model participant PKG AS helm v3 go.</description></item><item><title>Releases</title><link>https://soer3n.github.io/yaho/configuration/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/configuration/release/</guid><description> For configuring release installation and upgrade options like command flags, allowed namespaces and serviceAccountName which will be used for managing rendered resources there is a dedicated custom resource.
--- apiVersion: yaho.soer3n.dev/v1alpha1 kind: Config metadata: name: example-config namespace: helm ### needs to be the same namespace for every release resource which should use this configuration spec: serviceAccountName: account ### service account which will be used for configured releases for deploying resources namespace: install: false ### equal to `--install-namespace` flag allowed: ### configure a list of allowed namespaces for deploying releases - helm - share flags: ### keys are equal to install or upgrade flags atomic: false skipCRDs: false subNotes: true disableOpenAPIValidation: false dryRun: false disableHooks: false wait: false cleanupOnFail: false recreate: false timeout: 3600 force: false description: &amp;#34;test description&amp;#34;</description></item><item><title>Releases</title><link>https://soer3n.github.io/yaho/usage/releases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/usage/releases/</guid><description>After installing needed repository and chart resources you can create a helm release.
Needed chart resources have to be present before creating a release resource.
--- apiVersion: yaho.soer3n.dev/v1alpha1 kind: Release metadata: name: test-release namespace: helm spec: name: test-release namespace: share config: helm-release-config repo: test-repo chart: testing version: 0.1.1 The release will be installed either into spec.namespace or if this field is not set into object.metadata.namespace.
$ kubectl get releases.yaho.soer3n.dev -n helm NAME GROUP REPO CHART VERSION SYNCED STATUS REVISION AGE test-release test-repo testing 0.</description></item><item><title>Releases</title><link>https://soer3n.github.io/yaho/architecture/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/architecture/release/</guid><description>Release The release resource represents a helm release and is comparable to helm cli command &amp;ldquo;helm upgrade &amp;ndash;install &amp;hellip;&amp;rdquo;. It maps a release installation and/or upgrade process. See here for detailed information about the spec structure. You cannot define values directly in the release resource. This is solved by an own values resource which is explained here.
%%{init:{"theme":"forest", "mirrorActors":"true", "sequence": {"showSequenceNumbers":false, "wrap": false,"useMaxWidth": true}}}%% sequenceDiagram participant C AS client participant R AS reconciler participant RM AS release model participant CVM AS chart version model participant VM AS value model participant PKG AS helm v3 go.</description></item><item><title>Values</title><link>https://soer3n.github.io/yaho/architecture/value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://soer3n.github.io/yaho/architecture/value/</guid><description>Values values resource represents in general a values file for a release. There is some own logic there. The resource is splitted into two parts. The values and references to another values spec. See here for detailed information about the spec structure. The idea here is that these resources are managed like a construction kit for handling values for different releases. The main benefits are that you can stretch your values structure for a single release and that you can connect similar configurations for different releases.</description></item></channel></rss>